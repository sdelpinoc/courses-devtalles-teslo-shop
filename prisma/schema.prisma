generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model TypeOfCard {
  id   String @id @default(uuid())
  name String @unique

  // This generate a relation with the the Card model
  Card Card[]
}

model Attribute {
  id   String @id @default(uuid())
  name String @unique

  // This generate a relation with the the Card model
  Card Card[]
}

model Type {
  id   String @id @default(uuid())
  name String @unique

  // This generate a relation with the the Card model
  Card Card[]
}

model MonsterInvocations {
  id   String @id @default(uuid())
  name String @unique

  // This generate a relation with the the Card model
  Card Card[]
}

model MonsterPrimaryTypes {
  id   String @id @default(uuid())
  name String @unique

  MonsterPrimaryTypesCard MonsterPrimaryTypesCard[]
}

model MonsterPrimaryTypesCard {
  id String @id @default(uuid())

  // This generate a relation with MonsterPrimaryTypes
  monsterPrimaryType   MonsterPrimaryTypes @relation(fields: [monsterPrimaryTypeId], references: [id])
  monsterPrimaryTypeId String

  // This generate a relation with Card model
  card   Card   @relation(fields: [cardId], references: [id])
  cardId String
}

model MonsterSecondaryTypes {
  id   String @id @default(uuid())
  name String @unique

  // This generate a relation with the the Card model
  Card Card[]
}

model MonsterAbility {
  id   String @id @default(uuid())
  name String @unique

  // This generate a relation with the Card model
  Card Card[]
}

model LinkArrows {
  id   String @id @default(uuid())
  name String @unique

  // This generate a relation with the linkArrowsCard model
  linkArrowsCard LinkArrowsCard[]
}

model LinkArrowsCard {
  id String @id @default(uuid())

  // This generate a relation with LinkArrows
  linkArrows   LinkArrows @relation(fields: [linkArrowsId], references: [id])
  linkArrowsId String

  // This generate a relation with Card model
  card   Card   @relation(fields: [cardId], references: [id])
  cardId String
}

model SpellType {
  id   String @id @default(uuid())
  name String @unique

  card Card[]
}

model TrapType {
  id   String @id @default(uuid())
  name String @unique

  card Card[]
}

model Rarity {
  id         String       @id @default(uuid())
  name       String       @unique
  RarityCard RarityCard[]
}

model RarityCard {
  id String @id @default(uuid())

  // This generate a relation with Rarity model
  rarity   Rarity @relation(fields: [rarityId], references: [id])
  rarityId String

  // This generate a relation with Card model
  card   Card   @relation(fields: [cardId], references: [id])
  cardId String
}

model CardImage {
  id   Int    @id @default(autoincrement())
  name String

  card   Card   @relation(fields: [cardId], references: [id])
  cardId String
}

model Card {
  id String @id @default(uuid())

  name     String
  cardText String
  password Int

  level          Int?
  rank           Int?
  link           Int?
  attack_points  String?
  defense_points String?
  pendulumEffect String?
  pendulumScale  Int?

  slug    String @default("")
  price   Float  @default(0)
  inStock Int    @default(10)

  // Relations
  typeOfCard   TypeOfCard @relation(fields: [typeOfCardId], references: [id])
  typeOfCardId String

  attribute   Attribute? @relation(fields: [attributeId], references: [id])
  attributeId String?

  type   Type?   @relation(fields: [typeId], references: [id])
  typeId String?

  monsterInvocation   MonsterInvocations? @relation(fields: [monsterInvocationId], references: [id])
  monsterInvocationId String?

  monsterPrimaryTypesCard MonsterPrimaryTypesCard[]

  monsterSecondaryTypes   MonsterSecondaryTypes? @relation(fields: [monsterSecondaryTypesId], references: [id])
  monsterSecondaryTypesId String?

  monsterAbility   MonsterAbility? @relation(fields: [monsterAbilityId], references: [id])
  monsterAbilityId String?

  LinkArrowsCard LinkArrowsCard[]

  spellType   SpellType? @relation(fields: [spellTypeId], references: [id])
  spellTypeId String?

  trapType   TrapType? @relation(fields: [trapTypeId], references: [id])
  trapTypeId String?

  cardImage CardImage[]
  OrderItem OrderItem[]

  // Indices
  // @@index([attribute])
  // @@index([type])
  RarityCard RarityCard[]
}

enum Role {
  admin
  user
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String
  image         String?

  role Role @default(user)

  address UserAddress?

  // Relations
  Order Order[] // 0 to many
}

model Country {
  id   String @id
  name String

  // Relations
  UserAddress  UserAddress[]
  OrderAddress OrderAddress[]
}

model UserAddress {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String
  city       String
  phone      String

  // Relations
  country   Country @relation(fields: [countryId], references: [id])
  countryId String

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Order {
  id           String @id @default(uuid())
  subTotal     Float
  tax          Float
  total        Float
  itemsInOrder Int

  isPaid Boolean   @default(false)
  paidAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  userId String

  OrderItem    OrderItem[]
  OrderAddress OrderAddress? // Remove the [], to make a 1 to 1 relation, and also add the optional sign '?'

  transactionId String?
}

model OrderItem {
  id       String @id @default(uuid())
  quantity Int
  price    Float
  rarity   String // Is a string because can change in the future

  // Relations
  order   Order  @relation(fields: [orderId], references: [id])
  orderId String

  card   Card   @relation(fields: [cardId], references: [id]) // To obtain some information from the card
  cardId String
}

model OrderAddress {
  id String @id @default(uuid())

  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String
  city       String
  phone      String

  // Relations
  country   Country @relation(fields: [countryId], references: [id])
  countryId String

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String @unique // We add the @unique restriction to make a 1 to 1 relation with the order
}
